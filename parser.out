Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> Header Code
Rule 2     Program -> Code
Rule 3     Header -> Header Decl
Rule 4     Header -> Decl
Rule 5     Decl -> VAR NameList ;
Rule 6     NameList -> NAME
Rule 7     NameList -> NameList , NAME
Rule 8     Decl -> VAR NAME [ NUM ] ;
Rule 9     Decl -> VAR NAME [ NUM ] [ NUM ] ;
Rule 10    Code -> Code Codes
Rule 11    Code -> Codes
Rule 12    Codes -> Conditions
Rule 13    Codes -> WhileDo
Rule 14    Codes -> RepeatUntil
Rule 15    Codes -> Assign
Rule 16    Codes -> Print
Rule 17    Conditions -> IF ( Condition ) THEN { Code }
Rule 18    Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code }
Rule 19    WhileDo -> WHILE ( Condition ) DO { Code }
Rule 20    RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ;
Rule 21    Assign -> NAME = Expr ;
Rule 22    Assign -> NAME [ Expr ] = Expr ;
Rule 23    Assign -> NAME [ Expr ] [ Expr ] = Expr ;
Rule 24    Expr -> Condition
Rule 25    Expr -> Variable
Rule 26    Expr -> NUM
Rule 27    Expr -> Expr + Expr
Rule 28    Expr -> Expr - Expr
Rule 29    Expr -> Expr * Expr
Rule 30    Expr -> Expr / Expr
Rule 31    Expr -> Expr % Expr
Rule 32    Condition -> Expr EQ Expr
Rule 33    Condition -> Expr NEQ Expr
Rule 34    Condition -> ! Expr
Rule 35    Condition -> Expr > Expr
Rule 36    Condition -> Expr MOREEQ Expr
Rule 37    Condition -> Expr < Expr
Rule 38    Condition -> Expr LESSEQ Expr
Rule 39    Condition -> Expr AND Expr
Rule 40    Condition -> Expr OR Expr
Rule 41    Expr -> ( Expr )
Rule 42    Condition -> ( Condition )
Rule 43    Variable -> NAME
Rule 44    Variable -> NAME [ Expr ]
Rule 45    Variable -> NAME [ Expr ] [ Expr ]
Rule 46    Assign -> NAME [ Expr ] = INPUT ;
Rule 47    Assign -> NAME [ Expr ] [ Expr ] = INPUT ;
Rule 48    Assign -> NAME = INPUT ;
Rule 49    Print -> PRINT NAME ;
Rule 50    Print -> PRINT STRING ;

Terminals, with rules where they appear

!                    : 34
%                    : 31
(                    : 17 18 19 20 41 42
)                    : 17 18 19 20 41 42
*                    : 29
+                    : 27
,                    : 7
-                    : 28
/                    : 30
;                    : 5 8 9 20 21 22 23 46 47 48 49 50
<                    : 37
=                    : 21 22 23 46 47 48
>                    : 35
AND                  : 39
DO                   : 19
EQ                   : 32
IF                   : 17 18
INPUT                : 46 47 48
LESSEQ               : 38
MOREEQ               : 36
NAME                 : 6 7 8 9 21 22 23 43 44 45 46 47 48 49
NEQ                  : 33
NUM                  : 8 9 9 26
OR                   : 40
OTHERWISE            : 18
PRINT                : 49 50
REPEAT               : 20
STRING               : 50
THEN                 : 17 18
UNTIL                : 20
VAR                  : 5 8 9
WHILE                : 19
[                    : 8 9 9 22 23 23 44 45 45 46 47 47
]                    : 8 9 9 22 23 23 44 45 45 46 47 47
error                : 
{                    : 17 18 18 19 20
}                    : 17 18 18 19 20

Nonterminals, with rules where they appear

Assign               : 15
Code                 : 1 2 10 17 18 18 19 20
Codes                : 10 11
Condition            : 17 18 19 20 24 42
Conditions           : 12
Decl                 : 3 4
Expr                 : 21 22 22 23 23 23 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 35 35 36 36 37 37 38 38 39 39 40 40 41 44 45 45 46 47 47
Header               : 1 3
NameList             : 5 7
Print                : 16
Program              : 0
RepeatUntil          : 14
Variable             : 25
WhileDo              : 13

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . Header Code
    (2) Program -> . Code
    (3) Header -> . Header Decl
    (4) Header -> . Decl
    (10) Code -> . Code Codes
    (11) Code -> . Codes
    (5) Decl -> . VAR NameList ;
    (8) Decl -> . VAR NAME [ NUM ] ;
    (9) Decl -> . VAR NAME [ NUM ] [ NUM ] ;
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    VAR             shift and go to state 6
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Program                        shift and go to state 1
    Header                         shift and go to state 2
    Code                           shift and go to state 3
    Decl                           shift and go to state 4
    Codes                          shift and go to state 5
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 1

    (0) S' -> Program .



state 2

    (1) Program -> Header . Code
    (3) Header -> Header . Decl
    (10) Code -> . Code Codes
    (11) Code -> . Codes
    (5) Decl -> . VAR NameList ;
    (8) Decl -> . VAR NAME [ NUM ] ;
    (9) Decl -> . VAR NAME [ NUM ] [ NUM ] ;
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    VAR             shift and go to state 6
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Code                           shift and go to state 17
    Decl                           shift and go to state 18
    Codes                          shift and go to state 5
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 3

    (2) Program -> Code .
    (10) Code -> Code . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    $end            reduce using rule 2 (Program -> Code .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Codes                          shift and go to state 19
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 4

    (4) Header -> Decl .

    VAR             reduce using rule 4 (Header -> Decl .)
    IF              reduce using rule 4 (Header -> Decl .)
    WHILE           reduce using rule 4 (Header -> Decl .)
    REPEAT          reduce using rule 4 (Header -> Decl .)
    NAME            reduce using rule 4 (Header -> Decl .)
    PRINT           reduce using rule 4 (Header -> Decl .)


state 5

    (11) Code -> Codes .

    IF              reduce using rule 11 (Code -> Codes .)
    WHILE           reduce using rule 11 (Code -> Codes .)
    REPEAT          reduce using rule 11 (Code -> Codes .)
    NAME            reduce using rule 11 (Code -> Codes .)
    PRINT           reduce using rule 11 (Code -> Codes .)
    $end            reduce using rule 11 (Code -> Codes .)
    }               reduce using rule 11 (Code -> Codes .)


state 6

    (5) Decl -> VAR . NameList ;
    (8) Decl -> VAR . NAME [ NUM ] ;
    (9) Decl -> VAR . NAME [ NUM ] [ NUM ] ;
    (6) NameList -> . NAME
    (7) NameList -> . NameList , NAME

    NAME            shift and go to state 21

    NameList                       shift and go to state 20

state 7

    (21) Assign -> NAME . = Expr ;
    (22) Assign -> NAME . [ Expr ] = Expr ;
    (23) Assign -> NAME . [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> NAME . [ Expr ] = INPUT ;
    (47) Assign -> NAME . [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> NAME . = INPUT ;

    =               shift and go to state 22
    [               shift and go to state 23


state 8

    (12) Codes -> Conditions .

    IF              reduce using rule 12 (Codes -> Conditions .)
    WHILE           reduce using rule 12 (Codes -> Conditions .)
    REPEAT          reduce using rule 12 (Codes -> Conditions .)
    NAME            reduce using rule 12 (Codes -> Conditions .)
    PRINT           reduce using rule 12 (Codes -> Conditions .)
    $end            reduce using rule 12 (Codes -> Conditions .)
    }               reduce using rule 12 (Codes -> Conditions .)


state 9

    (13) Codes -> WhileDo .

    IF              reduce using rule 13 (Codes -> WhileDo .)
    WHILE           reduce using rule 13 (Codes -> WhileDo .)
    REPEAT          reduce using rule 13 (Codes -> WhileDo .)
    NAME            reduce using rule 13 (Codes -> WhileDo .)
    PRINT           reduce using rule 13 (Codes -> WhileDo .)
    $end            reduce using rule 13 (Codes -> WhileDo .)
    }               reduce using rule 13 (Codes -> WhileDo .)


state 10

    (14) Codes -> RepeatUntil .

    IF              reduce using rule 14 (Codes -> RepeatUntil .)
    WHILE           reduce using rule 14 (Codes -> RepeatUntil .)
    REPEAT          reduce using rule 14 (Codes -> RepeatUntil .)
    NAME            reduce using rule 14 (Codes -> RepeatUntil .)
    PRINT           reduce using rule 14 (Codes -> RepeatUntil .)
    $end            reduce using rule 14 (Codes -> RepeatUntil .)
    }               reduce using rule 14 (Codes -> RepeatUntil .)


state 11

    (15) Codes -> Assign .

    IF              reduce using rule 15 (Codes -> Assign .)
    WHILE           reduce using rule 15 (Codes -> Assign .)
    REPEAT          reduce using rule 15 (Codes -> Assign .)
    NAME            reduce using rule 15 (Codes -> Assign .)
    PRINT           reduce using rule 15 (Codes -> Assign .)
    $end            reduce using rule 15 (Codes -> Assign .)
    }               reduce using rule 15 (Codes -> Assign .)


state 12

    (16) Codes -> Print .

    IF              reduce using rule 16 (Codes -> Print .)
    WHILE           reduce using rule 16 (Codes -> Print .)
    REPEAT          reduce using rule 16 (Codes -> Print .)
    NAME            reduce using rule 16 (Codes -> Print .)
    PRINT           reduce using rule 16 (Codes -> Print .)
    $end            reduce using rule 16 (Codes -> Print .)
    }               reduce using rule 16 (Codes -> Print .)


state 13

    (17) Conditions -> IF . ( Condition ) THEN { Code }
    (18) Conditions -> IF . ( Condition ) THEN { Code } OTHERWISE { Code }

    (               shift and go to state 24


state 14

    (19) WhileDo -> WHILE . ( Condition ) DO { Code }

    (               shift and go to state 25


state 15

    (20) RepeatUntil -> REPEAT . { Code } UNTIL ( Condition ) ;

    {               shift and go to state 26


state 16

    (49) Print -> PRINT . NAME ;
    (50) Print -> PRINT . STRING ;

    NAME            shift and go to state 27
    STRING          shift and go to state 28


state 17

    (1) Program -> Header Code .
    (10) Code -> Code . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    $end            reduce using rule 1 (Program -> Header Code .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Codes                          shift and go to state 19
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 18

    (3) Header -> Header Decl .

    VAR             reduce using rule 3 (Header -> Header Decl .)
    IF              reduce using rule 3 (Header -> Header Decl .)
    WHILE           reduce using rule 3 (Header -> Header Decl .)
    REPEAT          reduce using rule 3 (Header -> Header Decl .)
    NAME            reduce using rule 3 (Header -> Header Decl .)
    PRINT           reduce using rule 3 (Header -> Header Decl .)


state 19

    (10) Code -> Code Codes .

    IF              reduce using rule 10 (Code -> Code Codes .)
    WHILE           reduce using rule 10 (Code -> Code Codes .)
    REPEAT          reduce using rule 10 (Code -> Code Codes .)
    NAME            reduce using rule 10 (Code -> Code Codes .)
    PRINT           reduce using rule 10 (Code -> Code Codes .)
    $end            reduce using rule 10 (Code -> Code Codes .)
    }               reduce using rule 10 (Code -> Code Codes .)


state 20

    (5) Decl -> VAR NameList . ;
    (7) NameList -> NameList . , NAME

    ;               shift and go to state 29
    ,               shift and go to state 30


state 21

    (8) Decl -> VAR NAME . [ NUM ] ;
    (9) Decl -> VAR NAME . [ NUM ] [ NUM ] ;
    (6) NameList -> NAME .

    [               shift and go to state 31
    ;               reduce using rule 6 (NameList -> NAME .)
    ,               reduce using rule 6 (NameList -> NAME .)


state 22

    (21) Assign -> NAME = . Expr ;
    (48) Assign -> NAME = . INPUT ;
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    INPUT           shift and go to state 34
    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 33
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 23

    (22) Assign -> NAME [ . Expr ] = Expr ;
    (23) Assign -> NAME [ . Expr ] [ Expr ] = Expr ;
    (46) Assign -> NAME [ . Expr ] = INPUT ;
    (47) Assign -> NAME [ . Expr ] [ Expr ] = INPUT ;
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 40
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 24

    (17) Conditions -> IF ( . Condition ) THEN { Code }
    (18) Conditions -> IF ( . Condition ) THEN { Code } OTHERWISE { Code }
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    !               shift and go to state 39
    (               shift and go to state 41
    NUM             shift and go to state 37
    NAME            shift and go to state 32

    Condition                      shift and go to state 42
    Expr                           shift and go to state 43
    Variable                       shift and go to state 36

state 25

    (19) WhileDo -> WHILE ( . Condition ) DO { Code }
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    !               shift and go to state 39
    (               shift and go to state 41
    NUM             shift and go to state 37
    NAME            shift and go to state 32

    Condition                      shift and go to state 44
    Expr                           shift and go to state 43
    Variable                       shift and go to state 36

state 26

    (20) RepeatUntil -> REPEAT { . Code } UNTIL ( Condition ) ;
    (10) Code -> . Code Codes
    (11) Code -> . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Code                           shift and go to state 45
    Codes                          shift and go to state 5
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 27

    (49) Print -> PRINT NAME . ;

    ;               shift and go to state 46


state 28

    (50) Print -> PRINT STRING . ;

    ;               shift and go to state 47


state 29

    (5) Decl -> VAR NameList ; .

    VAR             reduce using rule 5 (Decl -> VAR NameList ; .)
    IF              reduce using rule 5 (Decl -> VAR NameList ; .)
    WHILE           reduce using rule 5 (Decl -> VAR NameList ; .)
    REPEAT          reduce using rule 5 (Decl -> VAR NameList ; .)
    NAME            reduce using rule 5 (Decl -> VAR NameList ; .)
    PRINT           reduce using rule 5 (Decl -> VAR NameList ; .)


state 30

    (7) NameList -> NameList , . NAME

    NAME            shift and go to state 48


state 31

    (8) Decl -> VAR NAME [ . NUM ] ;
    (9) Decl -> VAR NAME [ . NUM ] [ NUM ] ;

    NUM             shift and go to state 49


state 32

    (43) Variable -> NAME .
    (44) Variable -> NAME . [ Expr ]
    (45) Variable -> NAME . [ Expr ] [ Expr ]

    ;               reduce using rule 43 (Variable -> NAME .)
    +               reduce using rule 43 (Variable -> NAME .)
    -               reduce using rule 43 (Variable -> NAME .)
    *               reduce using rule 43 (Variable -> NAME .)
    /               reduce using rule 43 (Variable -> NAME .)
    %               reduce using rule 43 (Variable -> NAME .)
    EQ              reduce using rule 43 (Variable -> NAME .)
    NEQ             reduce using rule 43 (Variable -> NAME .)
    >               reduce using rule 43 (Variable -> NAME .)
    MOREEQ          reduce using rule 43 (Variable -> NAME .)
    <               reduce using rule 43 (Variable -> NAME .)
    LESSEQ          reduce using rule 43 (Variable -> NAME .)
    AND             reduce using rule 43 (Variable -> NAME .)
    OR              reduce using rule 43 (Variable -> NAME .)
    ]               reduce using rule 43 (Variable -> NAME .)
    )               reduce using rule 43 (Variable -> NAME .)
    [               shift and go to state 50


state 33

    (21) Assign -> NAME = Expr . ;
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ;               shift and go to state 51
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 34

    (48) Assign -> NAME = INPUT . ;

    ;               shift and go to state 65


state 35

    (24) Expr -> Condition .

    ;               reduce using rule 24 (Expr -> Condition .)
    +               reduce using rule 24 (Expr -> Condition .)
    -               reduce using rule 24 (Expr -> Condition .)
    *               reduce using rule 24 (Expr -> Condition .)
    /               reduce using rule 24 (Expr -> Condition .)
    %               reduce using rule 24 (Expr -> Condition .)
    EQ              reduce using rule 24 (Expr -> Condition .)
    NEQ             reduce using rule 24 (Expr -> Condition .)
    >               reduce using rule 24 (Expr -> Condition .)
    MOREEQ          reduce using rule 24 (Expr -> Condition .)
    <               reduce using rule 24 (Expr -> Condition .)
    LESSEQ          reduce using rule 24 (Expr -> Condition .)
    AND             reduce using rule 24 (Expr -> Condition .)
    OR              reduce using rule 24 (Expr -> Condition .)
    ]               reduce using rule 24 (Expr -> Condition .)
    )               reduce using rule 24 (Expr -> Condition .)


state 36

    (25) Expr -> Variable .

    ;               reduce using rule 25 (Expr -> Variable .)
    +               reduce using rule 25 (Expr -> Variable .)
    -               reduce using rule 25 (Expr -> Variable .)
    *               reduce using rule 25 (Expr -> Variable .)
    /               reduce using rule 25 (Expr -> Variable .)
    %               reduce using rule 25 (Expr -> Variable .)
    EQ              reduce using rule 25 (Expr -> Variable .)
    NEQ             reduce using rule 25 (Expr -> Variable .)
    >               reduce using rule 25 (Expr -> Variable .)
    MOREEQ          reduce using rule 25 (Expr -> Variable .)
    <               reduce using rule 25 (Expr -> Variable .)
    LESSEQ          reduce using rule 25 (Expr -> Variable .)
    AND             reduce using rule 25 (Expr -> Variable .)
    OR              reduce using rule 25 (Expr -> Variable .)
    ]               reduce using rule 25 (Expr -> Variable .)
    )               reduce using rule 25 (Expr -> Variable .)


state 37

    (26) Expr -> NUM .

    ;               reduce using rule 26 (Expr -> NUM .)
    +               reduce using rule 26 (Expr -> NUM .)
    -               reduce using rule 26 (Expr -> NUM .)
    *               reduce using rule 26 (Expr -> NUM .)
    /               reduce using rule 26 (Expr -> NUM .)
    %               reduce using rule 26 (Expr -> NUM .)
    EQ              reduce using rule 26 (Expr -> NUM .)
    NEQ             reduce using rule 26 (Expr -> NUM .)
    >               reduce using rule 26 (Expr -> NUM .)
    MOREEQ          reduce using rule 26 (Expr -> NUM .)
    <               reduce using rule 26 (Expr -> NUM .)
    LESSEQ          reduce using rule 26 (Expr -> NUM .)
    AND             reduce using rule 26 (Expr -> NUM .)
    OR              reduce using rule 26 (Expr -> NUM .)
    ]               reduce using rule 26 (Expr -> NUM .)
    )               reduce using rule 26 (Expr -> NUM .)


state 38

    (41) Expr -> ( . Expr )
    (42) Condition -> ( . Condition )
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 66
    Condition                      shift and go to state 67
    Variable                       shift and go to state 36

state 39

    (34) Condition -> ! . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 68
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 40

    (22) Assign -> NAME [ Expr . ] = Expr ;
    (23) Assign -> NAME [ Expr . ] [ Expr ] = Expr ;
    (46) Assign -> NAME [ Expr . ] = INPUT ;
    (47) Assign -> NAME [ Expr . ] [ Expr ] = INPUT ;
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ]               shift and go to state 69
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 41

    (42) Condition -> ( . Condition )
    (41) Expr -> ( . Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    !               shift and go to state 39
    (               shift and go to state 41
    NUM             shift and go to state 37
    NAME            shift and go to state 32

    Condition                      shift and go to state 67
    Expr                           shift and go to state 70
    Variable                       shift and go to state 36

state 42

    (17) Conditions -> IF ( Condition . ) THEN { Code }
    (18) Conditions -> IF ( Condition . ) THEN { Code } OTHERWISE { Code }
    (24) Expr -> Condition .

    )               shift and go to state 71
    EQ              reduce using rule 24 (Expr -> Condition .)
    NEQ             reduce using rule 24 (Expr -> Condition .)
    >               reduce using rule 24 (Expr -> Condition .)
    MOREEQ          reduce using rule 24 (Expr -> Condition .)
    <               reduce using rule 24 (Expr -> Condition .)
    LESSEQ          reduce using rule 24 (Expr -> Condition .)
    AND             reduce using rule 24 (Expr -> Condition .)
    OR              reduce using rule 24 (Expr -> Condition .)
    +               reduce using rule 24 (Expr -> Condition .)
    -               reduce using rule 24 (Expr -> Condition .)
    *               reduce using rule 24 (Expr -> Condition .)
    /               reduce using rule 24 (Expr -> Condition .)
    %               reduce using rule 24 (Expr -> Condition .)


state 43

    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr

    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56


state 44

    (19) WhileDo -> WHILE ( Condition . ) DO { Code }
    (24) Expr -> Condition .

    )               shift and go to state 72
    EQ              reduce using rule 24 (Expr -> Condition .)
    NEQ             reduce using rule 24 (Expr -> Condition .)
    >               reduce using rule 24 (Expr -> Condition .)
    MOREEQ          reduce using rule 24 (Expr -> Condition .)
    <               reduce using rule 24 (Expr -> Condition .)
    LESSEQ          reduce using rule 24 (Expr -> Condition .)
    AND             reduce using rule 24 (Expr -> Condition .)
    OR              reduce using rule 24 (Expr -> Condition .)
    +               reduce using rule 24 (Expr -> Condition .)
    -               reduce using rule 24 (Expr -> Condition .)
    *               reduce using rule 24 (Expr -> Condition .)
    /               reduce using rule 24 (Expr -> Condition .)
    %               reduce using rule 24 (Expr -> Condition .)


state 45

    (20) RepeatUntil -> REPEAT { Code . } UNTIL ( Condition ) ;
    (10) Code -> Code . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    }               shift and go to state 73
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Codes                          shift and go to state 19
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 46

    (49) Print -> PRINT NAME ; .

    IF              reduce using rule 49 (Print -> PRINT NAME ; .)
    WHILE           reduce using rule 49 (Print -> PRINT NAME ; .)
    REPEAT          reduce using rule 49 (Print -> PRINT NAME ; .)
    NAME            reduce using rule 49 (Print -> PRINT NAME ; .)
    PRINT           reduce using rule 49 (Print -> PRINT NAME ; .)
    $end            reduce using rule 49 (Print -> PRINT NAME ; .)
    }               reduce using rule 49 (Print -> PRINT NAME ; .)


state 47

    (50) Print -> PRINT STRING ; .

    IF              reduce using rule 50 (Print -> PRINT STRING ; .)
    WHILE           reduce using rule 50 (Print -> PRINT STRING ; .)
    REPEAT          reduce using rule 50 (Print -> PRINT STRING ; .)
    NAME            reduce using rule 50 (Print -> PRINT STRING ; .)
    PRINT           reduce using rule 50 (Print -> PRINT STRING ; .)
    $end            reduce using rule 50 (Print -> PRINT STRING ; .)
    }               reduce using rule 50 (Print -> PRINT STRING ; .)


state 48

    (7) NameList -> NameList , NAME .

    ;               reduce using rule 7 (NameList -> NameList , NAME .)
    ,               reduce using rule 7 (NameList -> NameList , NAME .)


state 49

    (8) Decl -> VAR NAME [ NUM . ] ;
    (9) Decl -> VAR NAME [ NUM . ] [ NUM ] ;

    ]               shift and go to state 74


state 50

    (44) Variable -> NAME [ . Expr ]
    (45) Variable -> NAME [ . Expr ] [ Expr ]
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 75
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 51

    (21) Assign -> NAME = Expr ; .

    IF              reduce using rule 21 (Assign -> NAME = Expr ; .)
    WHILE           reduce using rule 21 (Assign -> NAME = Expr ; .)
    REPEAT          reduce using rule 21 (Assign -> NAME = Expr ; .)
    NAME            reduce using rule 21 (Assign -> NAME = Expr ; .)
    PRINT           reduce using rule 21 (Assign -> NAME = Expr ; .)
    $end            reduce using rule 21 (Assign -> NAME = Expr ; .)
    }               reduce using rule 21 (Assign -> NAME = Expr ; .)


state 52

    (27) Expr -> Expr + . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 76
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 53

    (28) Expr -> Expr - . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 77
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 54

    (29) Expr -> Expr * . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 78
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 55

    (30) Expr -> Expr / . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 79
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 56

    (31) Expr -> Expr % . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 80
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 57

    (32) Condition -> Expr EQ . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 81
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 58

    (33) Condition -> Expr NEQ . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 82
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 59

    (35) Condition -> Expr > . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 83
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 60

    (36) Condition -> Expr MOREEQ . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 84
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 61

    (37) Condition -> Expr < . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 85
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 62

    (38) Condition -> Expr LESSEQ . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 86
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 63

    (39) Condition -> Expr AND . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 87
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 64

    (40) Condition -> Expr OR . Expr
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 88
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 65

    (48) Assign -> NAME = INPUT ; .

    IF              reduce using rule 48 (Assign -> NAME = INPUT ; .)
    WHILE           reduce using rule 48 (Assign -> NAME = INPUT ; .)
    REPEAT          reduce using rule 48 (Assign -> NAME = INPUT ; .)
    NAME            reduce using rule 48 (Assign -> NAME = INPUT ; .)
    PRINT           reduce using rule 48 (Assign -> NAME = INPUT ; .)
    $end            reduce using rule 48 (Assign -> NAME = INPUT ; .)
    }               reduce using rule 48 (Assign -> NAME = INPUT ; .)


state 66

    (41) Expr -> ( Expr . )
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    )               shift and go to state 89
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 67

    (42) Condition -> ( Condition . )
    (24) Expr -> Condition .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 90
    +               reduce using rule 24 (Expr -> Condition .)
    -               reduce using rule 24 (Expr -> Condition .)
    *               reduce using rule 24 (Expr -> Condition .)
    /               reduce using rule 24 (Expr -> Condition .)
    %               reduce using rule 24 (Expr -> Condition .)
    EQ              reduce using rule 24 (Expr -> Condition .)
    NEQ             reduce using rule 24 (Expr -> Condition .)
    >               reduce using rule 24 (Expr -> Condition .)
    MOREEQ          reduce using rule 24 (Expr -> Condition .)
    <               reduce using rule 24 (Expr -> Condition .)
    LESSEQ          reduce using rule 24 (Expr -> Condition .)
    AND             reduce using rule 24 (Expr -> Condition .)
    OR              reduce using rule 24 (Expr -> Condition .)

  ! )               [ reduce using rule 24 (Expr -> Condition .) ]


state 68

    (34) Condition -> ! Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 34 (Condition -> ! Expr .)
    ]               reduce using rule 34 (Condition -> ! Expr .)
    )               reduce using rule 34 (Condition -> ! Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! -               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! *               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! /               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! %               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! EQ              [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! NEQ             [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! >               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! MOREEQ          [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! <               [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! LESSEQ          [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! AND             [ reduce using rule 34 (Condition -> ! Expr .) ]
  ! OR              [ reduce using rule 34 (Condition -> ! Expr .) ]


state 69

    (22) Assign -> NAME [ Expr ] . = Expr ;
    (23) Assign -> NAME [ Expr ] . [ Expr ] = Expr ;
    (46) Assign -> NAME [ Expr ] . = INPUT ;
    (47) Assign -> NAME [ Expr ] . [ Expr ] = INPUT ;

    =               shift and go to state 92
    [               shift and go to state 91


state 70

    (41) Expr -> ( Expr . )
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr

    )               shift and go to state 89
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56


state 71

    (17) Conditions -> IF ( Condition ) . THEN { Code }
    (18) Conditions -> IF ( Condition ) . THEN { Code } OTHERWISE { Code }

    THEN            shift and go to state 93


state 72

    (19) WhileDo -> WHILE ( Condition ) . DO { Code }

    DO              shift and go to state 94


state 73

    (20) RepeatUntil -> REPEAT { Code } . UNTIL ( Condition ) ;

    UNTIL           shift and go to state 95


state 74

    (8) Decl -> VAR NAME [ NUM ] . ;
    (9) Decl -> VAR NAME [ NUM ] . [ NUM ] ;

    ;               shift and go to state 97
    [               shift and go to state 96


state 75

    (44) Variable -> NAME [ Expr . ]
    (45) Variable -> NAME [ Expr . ] [ Expr ]
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ]               shift and go to state 98
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 76

    (27) Expr -> Expr + Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 27 (Expr -> Expr + Expr .)
    ]               reduce using rule 27 (Expr -> Expr + Expr .)
    )               reduce using rule 27 (Expr -> Expr + Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! -               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! *               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! /               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! %               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! EQ              [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! NEQ             [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! >               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! MOREEQ          [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! <               [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! LESSEQ          [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! AND             [ reduce using rule 27 (Expr -> Expr + Expr .) ]
  ! OR              [ reduce using rule 27 (Expr -> Expr + Expr .) ]


state 77

    (28) Expr -> Expr - Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 28 (Expr -> Expr - Expr .)
    ]               reduce using rule 28 (Expr -> Expr - Expr .)
    )               reduce using rule 28 (Expr -> Expr - Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! -               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! *               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! /               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! %               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! EQ              [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! NEQ             [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! >               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! MOREEQ          [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! <               [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! LESSEQ          [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! AND             [ reduce using rule 28 (Expr -> Expr - Expr .) ]
  ! OR              [ reduce using rule 28 (Expr -> Expr - Expr .) ]


state 78

    (29) Expr -> Expr * Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 29 (Expr -> Expr * Expr .)
    ]               reduce using rule 29 (Expr -> Expr * Expr .)
    )               reduce using rule 29 (Expr -> Expr * Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! -               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! *               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! /               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! %               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! EQ              [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! NEQ             [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! >               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! MOREEQ          [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! <               [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! LESSEQ          [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! AND             [ reduce using rule 29 (Expr -> Expr * Expr .) ]
  ! OR              [ reduce using rule 29 (Expr -> Expr * Expr .) ]


state 79

    (30) Expr -> Expr / Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 30 (Expr -> Expr / Expr .)
    ]               reduce using rule 30 (Expr -> Expr / Expr .)
    )               reduce using rule 30 (Expr -> Expr / Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! -               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! *               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! /               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! %               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! EQ              [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! NEQ             [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! >               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! MOREEQ          [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! <               [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! LESSEQ          [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! AND             [ reduce using rule 30 (Expr -> Expr / Expr .) ]
  ! OR              [ reduce using rule 30 (Expr -> Expr / Expr .) ]


state 80

    (31) Expr -> Expr % Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 31 (Expr -> Expr % Expr .)
    ]               reduce using rule 31 (Expr -> Expr % Expr .)
    )               reduce using rule 31 (Expr -> Expr % Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! -               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! *               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! /               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! %               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! EQ              [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! NEQ             [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! >               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! MOREEQ          [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! <               [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! LESSEQ          [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! AND             [ reduce using rule 31 (Expr -> Expr % Expr .) ]
  ! OR              [ reduce using rule 31 (Expr -> Expr % Expr .) ]


state 81

    (32) Condition -> Expr EQ Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 32 (Condition -> Expr EQ Expr .)
    ]               reduce using rule 32 (Condition -> Expr EQ Expr .)
    )               reduce using rule 32 (Condition -> Expr EQ Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! -               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! *               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! /               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! %               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! EQ              [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! NEQ             [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! >               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! MOREEQ          [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! <               [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! LESSEQ          [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! AND             [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]
  ! OR              [ reduce using rule 32 (Condition -> Expr EQ Expr .) ]


state 82

    (33) Condition -> Expr NEQ Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 33 (Condition -> Expr NEQ Expr .)
    ]               reduce using rule 33 (Condition -> Expr NEQ Expr .)
    )               reduce using rule 33 (Condition -> Expr NEQ Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! -               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! *               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! /               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! %               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! EQ              [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! NEQ             [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! >               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! MOREEQ          [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! <               [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! LESSEQ          [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! AND             [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]
  ! OR              [ reduce using rule 33 (Condition -> Expr NEQ Expr .) ]


state 83

    (35) Condition -> Expr > Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 35 (Condition -> Expr > Expr .)
    ]               reduce using rule 35 (Condition -> Expr > Expr .)
    )               reduce using rule 35 (Condition -> Expr > Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! -               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! *               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! /               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! %               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! EQ              [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! NEQ             [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! >               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! MOREEQ          [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! <               [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! LESSEQ          [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! AND             [ reduce using rule 35 (Condition -> Expr > Expr .) ]
  ! OR              [ reduce using rule 35 (Condition -> Expr > Expr .) ]


state 84

    (36) Condition -> Expr MOREEQ Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 36 (Condition -> Expr MOREEQ Expr .)
    ]               reduce using rule 36 (Condition -> Expr MOREEQ Expr .)
    )               reduce using rule 36 (Condition -> Expr MOREEQ Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! -               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! *               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! /               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! %               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! EQ              [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! NEQ             [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! >               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! MOREEQ          [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! <               [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! LESSEQ          [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! AND             [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]
  ! OR              [ reduce using rule 36 (Condition -> Expr MOREEQ Expr .) ]


state 85

    (37) Condition -> Expr < Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 37 (Condition -> Expr < Expr .)
    ]               reduce using rule 37 (Condition -> Expr < Expr .)
    )               reduce using rule 37 (Condition -> Expr < Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! -               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! *               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! /               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! %               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! EQ              [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! NEQ             [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! >               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! MOREEQ          [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! <               [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! LESSEQ          [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! AND             [ reduce using rule 37 (Condition -> Expr < Expr .) ]
  ! OR              [ reduce using rule 37 (Condition -> Expr < Expr .) ]


state 86

    (38) Condition -> Expr LESSEQ Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 38 (Condition -> Expr LESSEQ Expr .)
    ]               reduce using rule 38 (Condition -> Expr LESSEQ Expr .)
    )               reduce using rule 38 (Condition -> Expr LESSEQ Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! -               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! *               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! /               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! %               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! EQ              [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! NEQ             [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! >               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! MOREEQ          [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! <               [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! LESSEQ          [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! AND             [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]
  ! OR              [ reduce using rule 38 (Condition -> Expr LESSEQ Expr .) ]


state 87

    (39) Condition -> Expr AND Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 39 (Condition -> Expr AND Expr .)
    ]               reduce using rule 39 (Condition -> Expr AND Expr .)
    )               reduce using rule 39 (Condition -> Expr AND Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! -               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! *               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! /               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! %               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! EQ              [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! NEQ             [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! >               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! MOREEQ          [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! <               [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! LESSEQ          [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! AND             [ reduce using rule 39 (Condition -> Expr AND Expr .) ]
  ! OR              [ reduce using rule 39 (Condition -> Expr AND Expr .) ]


state 88

    (40) Condition -> Expr OR Expr .
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for MOREEQ resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 40 (Condition -> Expr OR Expr .)
    ]               reduce using rule 40 (Condition -> Expr OR Expr .)
    )               reduce using rule 40 (Condition -> Expr OR Expr .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! +               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! -               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! *               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! /               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! %               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! EQ              [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! NEQ             [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! >               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! MOREEQ          [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! <               [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! LESSEQ          [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! AND             [ reduce using rule 40 (Condition -> Expr OR Expr .) ]
  ! OR              [ reduce using rule 40 (Condition -> Expr OR Expr .) ]


state 89

    (41) Expr -> ( Expr ) .

    ;               reduce using rule 41 (Expr -> ( Expr ) .)
    +               reduce using rule 41 (Expr -> ( Expr ) .)
    -               reduce using rule 41 (Expr -> ( Expr ) .)
    *               reduce using rule 41 (Expr -> ( Expr ) .)
    /               reduce using rule 41 (Expr -> ( Expr ) .)
    %               reduce using rule 41 (Expr -> ( Expr ) .)
    EQ              reduce using rule 41 (Expr -> ( Expr ) .)
    NEQ             reduce using rule 41 (Expr -> ( Expr ) .)
    >               reduce using rule 41 (Expr -> ( Expr ) .)
    MOREEQ          reduce using rule 41 (Expr -> ( Expr ) .)
    <               reduce using rule 41 (Expr -> ( Expr ) .)
    LESSEQ          reduce using rule 41 (Expr -> ( Expr ) .)
    AND             reduce using rule 41 (Expr -> ( Expr ) .)
    OR              reduce using rule 41 (Expr -> ( Expr ) .)
    ]               reduce using rule 41 (Expr -> ( Expr ) .)
    )               reduce using rule 41 (Expr -> ( Expr ) .)


state 90

    (42) Condition -> ( Condition ) .

    ;               reduce using rule 42 (Condition -> ( Condition ) .)
    +               reduce using rule 42 (Condition -> ( Condition ) .)
    -               reduce using rule 42 (Condition -> ( Condition ) .)
    *               reduce using rule 42 (Condition -> ( Condition ) .)
    /               reduce using rule 42 (Condition -> ( Condition ) .)
    %               reduce using rule 42 (Condition -> ( Condition ) .)
    EQ              reduce using rule 42 (Condition -> ( Condition ) .)
    NEQ             reduce using rule 42 (Condition -> ( Condition ) .)
    >               reduce using rule 42 (Condition -> ( Condition ) .)
    MOREEQ          reduce using rule 42 (Condition -> ( Condition ) .)
    <               reduce using rule 42 (Condition -> ( Condition ) .)
    LESSEQ          reduce using rule 42 (Condition -> ( Condition ) .)
    AND             reduce using rule 42 (Condition -> ( Condition ) .)
    OR              reduce using rule 42 (Condition -> ( Condition ) .)
    ]               reduce using rule 42 (Condition -> ( Condition ) .)
    )               reduce using rule 42 (Condition -> ( Condition ) .)


state 91

    (23) Assign -> NAME [ Expr ] [ . Expr ] = Expr ;
    (47) Assign -> NAME [ Expr ] [ . Expr ] = INPUT ;
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 99
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 92

    (22) Assign -> NAME [ Expr ] = . Expr ;
    (46) Assign -> NAME [ Expr ] = . INPUT ;
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    INPUT           shift and go to state 101
    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 100
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 93

    (17) Conditions -> IF ( Condition ) THEN . { Code }
    (18) Conditions -> IF ( Condition ) THEN . { Code } OTHERWISE { Code }

    {               shift and go to state 102


state 94

    (19) WhileDo -> WHILE ( Condition ) DO . { Code }

    {               shift and go to state 103


state 95

    (20) RepeatUntil -> REPEAT { Code } UNTIL . ( Condition ) ;

    (               shift and go to state 104


state 96

    (9) Decl -> VAR NAME [ NUM ] [ . NUM ] ;

    NUM             shift and go to state 105


state 97

    (8) Decl -> VAR NAME [ NUM ] ; .

    VAR             reduce using rule 8 (Decl -> VAR NAME [ NUM ] ; .)
    IF              reduce using rule 8 (Decl -> VAR NAME [ NUM ] ; .)
    WHILE           reduce using rule 8 (Decl -> VAR NAME [ NUM ] ; .)
    REPEAT          reduce using rule 8 (Decl -> VAR NAME [ NUM ] ; .)
    NAME            reduce using rule 8 (Decl -> VAR NAME [ NUM ] ; .)
    PRINT           reduce using rule 8 (Decl -> VAR NAME [ NUM ] ; .)


state 98

    (44) Variable -> NAME [ Expr ] .
    (45) Variable -> NAME [ Expr ] . [ Expr ]

    ;               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    +               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    -               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    *               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    /               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    %               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    EQ              reduce using rule 44 (Variable -> NAME [ Expr ] .)
    NEQ             reduce using rule 44 (Variable -> NAME [ Expr ] .)
    >               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    MOREEQ          reduce using rule 44 (Variable -> NAME [ Expr ] .)
    <               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    LESSEQ          reduce using rule 44 (Variable -> NAME [ Expr ] .)
    AND             reduce using rule 44 (Variable -> NAME [ Expr ] .)
    OR              reduce using rule 44 (Variable -> NAME [ Expr ] .)
    ]               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    )               reduce using rule 44 (Variable -> NAME [ Expr ] .)
    [               shift and go to state 106


state 99

    (23) Assign -> NAME [ Expr ] [ Expr . ] = Expr ;
    (47) Assign -> NAME [ Expr ] [ Expr . ] = INPUT ;
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ]               shift and go to state 107
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 100

    (22) Assign -> NAME [ Expr ] = Expr . ;
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ;               shift and go to state 108
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 101

    (46) Assign -> NAME [ Expr ] = INPUT . ;

    ;               shift and go to state 109


state 102

    (17) Conditions -> IF ( Condition ) THEN { . Code }
    (18) Conditions -> IF ( Condition ) THEN { . Code } OTHERWISE { Code }
    (10) Code -> . Code Codes
    (11) Code -> . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Code                           shift and go to state 110
    Codes                          shift and go to state 5
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 103

    (19) WhileDo -> WHILE ( Condition ) DO { . Code }
    (10) Code -> . Code Codes
    (11) Code -> . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Code                           shift and go to state 111
    Codes                          shift and go to state 5
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 104

    (20) RepeatUntil -> REPEAT { Code } UNTIL ( . Condition ) ;
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    !               shift and go to state 39
    (               shift and go to state 41
    NUM             shift and go to state 37
    NAME            shift and go to state 32

    Condition                      shift and go to state 112
    Expr                           shift and go to state 43
    Variable                       shift and go to state 36

state 105

    (9) Decl -> VAR NAME [ NUM ] [ NUM . ] ;

    ]               shift and go to state 113


state 106

    (45) Variable -> NAME [ Expr ] [ . Expr ]
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 114
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 107

    (23) Assign -> NAME [ Expr ] [ Expr ] . = Expr ;
    (47) Assign -> NAME [ Expr ] [ Expr ] . = INPUT ;

    =               shift and go to state 115


state 108

    (22) Assign -> NAME [ Expr ] = Expr ; .

    IF              reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)
    WHILE           reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)
    REPEAT          reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)
    NAME            reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)
    PRINT           reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)
    $end            reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)
    }               reduce using rule 22 (Assign -> NAME [ Expr ] = Expr ; .)


state 109

    (46) Assign -> NAME [ Expr ] = INPUT ; .

    IF              reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)
    WHILE           reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)
    REPEAT          reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)
    NAME            reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)
    PRINT           reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)
    $end            reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)
    }               reduce using rule 46 (Assign -> NAME [ Expr ] = INPUT ; .)


state 110

    (17) Conditions -> IF ( Condition ) THEN { Code . }
    (18) Conditions -> IF ( Condition ) THEN { Code . } OTHERWISE { Code }
    (10) Code -> Code . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    }               shift and go to state 116
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Codes                          shift and go to state 19
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 111

    (19) WhileDo -> WHILE ( Condition ) DO { Code . }
    (10) Code -> Code . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    }               shift and go to state 117
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Codes                          shift and go to state 19
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 112

    (20) RepeatUntil -> REPEAT { Code } UNTIL ( Condition . ) ;
    (24) Expr -> Condition .

    )               shift and go to state 118
    EQ              reduce using rule 24 (Expr -> Condition .)
    NEQ             reduce using rule 24 (Expr -> Condition .)
    >               reduce using rule 24 (Expr -> Condition .)
    MOREEQ          reduce using rule 24 (Expr -> Condition .)
    <               reduce using rule 24 (Expr -> Condition .)
    LESSEQ          reduce using rule 24 (Expr -> Condition .)
    AND             reduce using rule 24 (Expr -> Condition .)
    OR              reduce using rule 24 (Expr -> Condition .)
    +               reduce using rule 24 (Expr -> Condition .)
    -               reduce using rule 24 (Expr -> Condition .)
    *               reduce using rule 24 (Expr -> Condition .)
    /               reduce using rule 24 (Expr -> Condition .)
    %               reduce using rule 24 (Expr -> Condition .)


state 113

    (9) Decl -> VAR NAME [ NUM ] [ NUM ] . ;

    ;               shift and go to state 119


state 114

    (45) Variable -> NAME [ Expr ] [ Expr . ]
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ]               shift and go to state 120
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 115

    (23) Assign -> NAME [ Expr ] [ Expr ] = . Expr ;
    (47) Assign -> NAME [ Expr ] [ Expr ] = . INPUT ;
    (24) Expr -> . Condition
    (25) Expr -> . Variable
    (26) Expr -> . NUM
    (27) Expr -> . Expr + Expr
    (28) Expr -> . Expr - Expr
    (29) Expr -> . Expr * Expr
    (30) Expr -> . Expr / Expr
    (31) Expr -> . Expr % Expr
    (41) Expr -> . ( Expr )
    (32) Condition -> . Expr EQ Expr
    (33) Condition -> . Expr NEQ Expr
    (34) Condition -> . ! Expr
    (35) Condition -> . Expr > Expr
    (36) Condition -> . Expr MOREEQ Expr
    (37) Condition -> . Expr < Expr
    (38) Condition -> . Expr LESSEQ Expr
    (39) Condition -> . Expr AND Expr
    (40) Condition -> . Expr OR Expr
    (42) Condition -> . ( Condition )
    (43) Variable -> . NAME
    (44) Variable -> . NAME [ Expr ]
    (45) Variable -> . NAME [ Expr ] [ Expr ]

    INPUT           shift and go to state 122
    NUM             shift and go to state 37
    (               shift and go to state 38
    !               shift and go to state 39
    NAME            shift and go to state 32

    Expr                           shift and go to state 121
    Condition                      shift and go to state 35
    Variable                       shift and go to state 36

state 116

    (17) Conditions -> IF ( Condition ) THEN { Code } .
    (18) Conditions -> IF ( Condition ) THEN { Code } . OTHERWISE { Code }

    IF              reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    WHILE           reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    REPEAT          reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    NAME            reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    PRINT           reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    $end            reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    }               reduce using rule 17 (Conditions -> IF ( Condition ) THEN { Code } .)
    OTHERWISE       shift and go to state 123


state 117

    (19) WhileDo -> WHILE ( Condition ) DO { Code } .

    IF              reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)
    WHILE           reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)
    REPEAT          reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)
    NAME            reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)
    PRINT           reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)
    $end            reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)
    }               reduce using rule 19 (WhileDo -> WHILE ( Condition ) DO { Code } .)


state 118

    (20) RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) . ;

    ;               shift and go to state 124


state 119

    (9) Decl -> VAR NAME [ NUM ] [ NUM ] ; .

    VAR             reduce using rule 9 (Decl -> VAR NAME [ NUM ] [ NUM ] ; .)
    IF              reduce using rule 9 (Decl -> VAR NAME [ NUM ] [ NUM ] ; .)
    WHILE           reduce using rule 9 (Decl -> VAR NAME [ NUM ] [ NUM ] ; .)
    REPEAT          reduce using rule 9 (Decl -> VAR NAME [ NUM ] [ NUM ] ; .)
    NAME            reduce using rule 9 (Decl -> VAR NAME [ NUM ] [ NUM ] ; .)
    PRINT           reduce using rule 9 (Decl -> VAR NAME [ NUM ] [ NUM ] ; .)


state 120

    (45) Variable -> NAME [ Expr ] [ Expr ] .

    ;               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    +               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    -               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    *               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    /               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    %               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    EQ              reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    NEQ             reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    >               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    MOREEQ          reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    <               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    LESSEQ          reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    AND             reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    OR              reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    ]               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)
    )               reduce using rule 45 (Variable -> NAME [ Expr ] [ Expr ] .)


state 121

    (23) Assign -> NAME [ Expr ] [ Expr ] = Expr . ;
    (27) Expr -> Expr . + Expr
    (28) Expr -> Expr . - Expr
    (29) Expr -> Expr . * Expr
    (30) Expr -> Expr . / Expr
    (31) Expr -> Expr . % Expr
    (32) Condition -> Expr . EQ Expr
    (33) Condition -> Expr . NEQ Expr
    (35) Condition -> Expr . > Expr
    (36) Condition -> Expr . MOREEQ Expr
    (37) Condition -> Expr . < Expr
    (38) Condition -> Expr . LESSEQ Expr
    (39) Condition -> Expr . AND Expr
    (40) Condition -> Expr . OR Expr

    ;               shift and go to state 125
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    %               shift and go to state 56
    EQ              shift and go to state 57
    NEQ             shift and go to state 58
    >               shift and go to state 59
    MOREEQ          shift and go to state 60
    <               shift and go to state 61
    LESSEQ          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 122

    (47) Assign -> NAME [ Expr ] [ Expr ] = INPUT . ;

    ;               shift and go to state 126


state 123

    (18) Conditions -> IF ( Condition ) THEN { Code } OTHERWISE . { Code }

    {               shift and go to state 127


state 124

    (20) RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .

    IF              reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)
    WHILE           reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)
    REPEAT          reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)
    NAME            reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)
    PRINT           reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)
    $end            reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)
    }               reduce using rule 20 (RepeatUntil -> REPEAT { Code } UNTIL ( Condition ) ; .)


state 125

    (23) Assign -> NAME [ Expr ] [ Expr ] = Expr ; .

    IF              reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)
    WHILE           reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)
    REPEAT          reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)
    NAME            reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)
    PRINT           reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)
    $end            reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)
    }               reduce using rule 23 (Assign -> NAME [ Expr ] [ Expr ] = Expr ; .)


state 126

    (47) Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .

    IF              reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)
    WHILE           reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)
    REPEAT          reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)
    NAME            reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)
    PRINT           reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)
    $end            reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)
    }               reduce using rule 47 (Assign -> NAME [ Expr ] [ Expr ] = INPUT ; .)


state 127

    (18) Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { . Code }
    (10) Code -> . Code Codes
    (11) Code -> . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Code                           shift and go to state 128
    Codes                          shift and go to state 5
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 128

    (18) Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code . }
    (10) Code -> Code . Codes
    (12) Codes -> . Conditions
    (13) Codes -> . WhileDo
    (14) Codes -> . RepeatUntil
    (15) Codes -> . Assign
    (16) Codes -> . Print
    (17) Conditions -> . IF ( Condition ) THEN { Code }
    (18) Conditions -> . IF ( Condition ) THEN { Code } OTHERWISE { Code }
    (19) WhileDo -> . WHILE ( Condition ) DO { Code }
    (20) RepeatUntil -> . REPEAT { Code } UNTIL ( Condition ) ;
    (21) Assign -> . NAME = Expr ;
    (22) Assign -> . NAME [ Expr ] = Expr ;
    (23) Assign -> . NAME [ Expr ] [ Expr ] = Expr ;
    (46) Assign -> . NAME [ Expr ] = INPUT ;
    (47) Assign -> . NAME [ Expr ] [ Expr ] = INPUT ;
    (48) Assign -> . NAME = INPUT ;
    (49) Print -> . PRINT NAME ;
    (50) Print -> . PRINT STRING ;

    }               shift and go to state 129
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    REPEAT          shift and go to state 15
    NAME            shift and go to state 7
    PRINT           shift and go to state 16

    Codes                          shift and go to state 19
    Conditions                     shift and go to state 8
    WhileDo                        shift and go to state 9
    RepeatUntil                    shift and go to state 10
    Assign                         shift and go to state 11
    Print                          shift and go to state 12

state 129

    (18) Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .

    IF              reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)
    WHILE           reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)
    REPEAT          reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)
    NAME            reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)
    PRINT           reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)
    $end            reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)
    }               reduce using rule 18 (Conditions -> IF ( Condition ) THEN { Code } OTHERWISE { Code } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 67 resolved as shift
WARNING: shift/reduce conflict for + in state 68 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for * in state 68 resolved as shift
WARNING: shift/reduce conflict for / in state 68 resolved as shift
WARNING: shift/reduce conflict for % in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for > in state 68 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for < in state 68 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 76 resolved as shift
WARNING: shift/reduce conflict for - in state 76 resolved as shift
WARNING: shift/reduce conflict for * in state 76 resolved as shift
WARNING: shift/reduce conflict for / in state 76 resolved as shift
WARNING: shift/reduce conflict for % in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for > in state 76 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for < in state 76 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 77 resolved as shift
WARNING: shift/reduce conflict for - in state 77 resolved as shift
WARNING: shift/reduce conflict for * in state 77 resolved as shift
WARNING: shift/reduce conflict for / in state 77 resolved as shift
WARNING: shift/reduce conflict for % in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 77 resolved as shift
WARNING: shift/reduce conflict for > in state 77 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 77 resolved as shift
WARNING: shift/reduce conflict for < in state 77 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for + in state 78 resolved as shift
WARNING: shift/reduce conflict for - in state 78 resolved as shift
WARNING: shift/reduce conflict for * in state 78 resolved as shift
WARNING: shift/reduce conflict for / in state 78 resolved as shift
WARNING: shift/reduce conflict for % in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 78 resolved as shift
WARNING: shift/reduce conflict for > in state 78 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 78 resolved as shift
WARNING: shift/reduce conflict for < in state 78 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for + in state 79 resolved as shift
WARNING: shift/reduce conflict for - in state 79 resolved as shift
WARNING: shift/reduce conflict for * in state 79 resolved as shift
WARNING: shift/reduce conflict for / in state 79 resolved as shift
WARNING: shift/reduce conflict for % in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 79 resolved as shift
WARNING: shift/reduce conflict for > in state 79 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 79 resolved as shift
WARNING: shift/reduce conflict for < in state 79 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for + in state 80 resolved as shift
WARNING: shift/reduce conflict for - in state 80 resolved as shift
WARNING: shift/reduce conflict for * in state 80 resolved as shift
WARNING: shift/reduce conflict for / in state 80 resolved as shift
WARNING: shift/reduce conflict for % in state 80 resolved as shift
WARNING: shift/reduce conflict for EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 80 resolved as shift
WARNING: shift/reduce conflict for > in state 80 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 80 resolved as shift
WARNING: shift/reduce conflict for < in state 80 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for + in state 81 resolved as shift
WARNING: shift/reduce conflict for - in state 81 resolved as shift
WARNING: shift/reduce conflict for * in state 81 resolved as shift
WARNING: shift/reduce conflict for / in state 81 resolved as shift
WARNING: shift/reduce conflict for % in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 81 resolved as shift
WARNING: shift/reduce conflict for > in state 81 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 81 resolved as shift
WARNING: shift/reduce conflict for < in state 81 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for + in state 82 resolved as shift
WARNING: shift/reduce conflict for - in state 82 resolved as shift
WARNING: shift/reduce conflict for * in state 82 resolved as shift
WARNING: shift/reduce conflict for / in state 82 resolved as shift
WARNING: shift/reduce conflict for % in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for > in state 82 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for < in state 82 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for + in state 83 resolved as shift
WARNING: shift/reduce conflict for - in state 83 resolved as shift
WARNING: shift/reduce conflict for * in state 83 resolved as shift
WARNING: shift/reduce conflict for / in state 83 resolved as shift
WARNING: shift/reduce conflict for % in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 83 resolved as shift
WARNING: shift/reduce conflict for > in state 83 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 83 resolved as shift
WARNING: shift/reduce conflict for < in state 83 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for + in state 84 resolved as shift
WARNING: shift/reduce conflict for - in state 84 resolved as shift
WARNING: shift/reduce conflict for * in state 84 resolved as shift
WARNING: shift/reduce conflict for / in state 84 resolved as shift
WARNING: shift/reduce conflict for % in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for > in state 84 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for < in state 84 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for + in state 85 resolved as shift
WARNING: shift/reduce conflict for - in state 85 resolved as shift
WARNING: shift/reduce conflict for * in state 85 resolved as shift
WARNING: shift/reduce conflict for / in state 85 resolved as shift
WARNING: shift/reduce conflict for % in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 85 resolved as shift
WARNING: shift/reduce conflict for > in state 85 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 85 resolved as shift
WARNING: shift/reduce conflict for < in state 85 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for + in state 86 resolved as shift
WARNING: shift/reduce conflict for - in state 86 resolved as shift
WARNING: shift/reduce conflict for * in state 86 resolved as shift
WARNING: shift/reduce conflict for / in state 86 resolved as shift
WARNING: shift/reduce conflict for % in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for > in state 86 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for < in state 86 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for + in state 87 resolved as shift
WARNING: shift/reduce conflict for - in state 87 resolved as shift
WARNING: shift/reduce conflict for * in state 87 resolved as shift
WARNING: shift/reduce conflict for / in state 87 resolved as shift
WARNING: shift/reduce conflict for % in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for > in state 87 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for < in state 87 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for + in state 88 resolved as shift
WARNING: shift/reduce conflict for - in state 88 resolved as shift
WARNING: shift/reduce conflict for * in state 88 resolved as shift
WARNING: shift/reduce conflict for / in state 88 resolved as shift
WARNING: shift/reduce conflict for % in state 88 resolved as shift
WARNING: shift/reduce conflict for EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 88 resolved as shift
WARNING: shift/reduce conflict for > in state 88 resolved as shift
WARNING: shift/reduce conflict for MOREEQ in state 88 resolved as shift
WARNING: shift/reduce conflict for < in state 88 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
